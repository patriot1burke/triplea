<?xml version="1.0"?>


<project name="TripleA" basedir="." default="compile" xmlns:fb="antlib:edu.umd.cs.findbugs">

	<taskdef uri="antlib:edu.umd.cs.findbugs" resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpath="ant/findbugs-1.3.9/lib/findbugs-ant.jar"/>

	<property file=".ant.properties" />
    <property name="junit-result-dir" location="test-results"/>
    <property name="src" location="src"/>
    <property name="classes" location="classes"/>

    <property name="test-src" location="test"/>
    <property name="test-classes" location="testclasses"/>

	<!-- this path does not have junit on it -->
	<path id="src.classpath">
        <pathelement path="lib\mailapi.jar"/>
        <pathelement path="lib\smtp.jar"/>
        <pathelement path="lib\activation.jar"/>
		<pathelement path="lib\standalone-compiler.jar" />
		<pathelement path="lib\AppleJavaExtensions.jar" />
		<pathelement path="lib\commons-httpclient-3.0.1.jar" />
		<pathelement path="lib\commons-logging-1.1.jar" />
		<pathelement path="lib\commons-codec-1.3.jar" />
		<pathelement path="lib\substance_5.3.jar" />
		<pathelement path="classes/" />
	</path>

	<path id="test.classpath">
		<path refid="src.classpath"/>
        <pathelement path="${test-classes}"/>
		<pathelement path="lib\junit.jar" />
        <pathelement path="lib\derby_10_1_2.jar"/>
	</path>


	<!-- All -->
	<target name="all" depends="clean,compile,test,zip, zipSource" description="cleans, compiles, tests, zips, and zips source">
	</target>


	<!-- Clean -->
	<target name="clean" description="Remove all release, class and saved game files">
		<delete dir="release" />
		<delete dir="${classes}" />
		<delete dir="bin" />
		<delete dir="${test-classes}" />
		<delete dir="savedGames" />
	</target>

	<!-- Compile -->
	<target name="compile" description="Compile the source files and copy over the resource files">

		<!-- we require jdk 1.5 or greater -->
		<fail message="jdk 1.5 or greater required, you are currently using: ${ant.java.version}">
			<condition>
				<or>
					<equals arg1="1.1" arg2="${ant.java.version}" />
					<equals arg1="1.2" arg2="${ant.java.version}" />
					<equals arg1="1.3" arg2="${ant.java.version}" />
					<equals arg1="1.4" arg2="${ant.java.version}" />
				</or>
			</condition>
		</fail>

		<!-- we only need this for deployment -->
		<delete file="bin/triplea.jar" failonerror="" />

		<mkdir dir="${classes}" />
		<mkdir dir="${test-classes}" />
		<copy todir="classes">
			<fileset dir="data">
				<include name="**/*.dtd" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
				<include name="**/*.txt" />
				<include name="**/*.jpeg" />
				<include name="**/*.xml" />
				<include name="**/*.xslt" />
				<include name="**/*.wav" />
				<include name="**/*.properties" />
				<include name="**/*.html" />
			</fileset>
		</copy>

		<javac srcdir="src/" destdir="${classes}" debug="true" deprecation="true" classpathref="src.classpath" target="1.5" encoding="utf8" />

		<!-- to check the correct java version, we need to compile the startup class so that it will run on older vms -->
		<!-- delete the startup class, and recompile it -->
		<delete>
			<fileset dir="classes" includes="**/GameRunner.class">
			</fileset>
		</delete>

		<javac srcdir="${src}" destdir="${classes}" debug="true" deprecation="true" classpathref="src.classpath" target="1.2" source="1.2" />
	</target>

	<target name="run" depends="compile" description="Run Triplea">
		<java classpathref="src.classpath" spawn="true" classname="games.strategy.engine.framework.GameRunner" fork="true"/>
	</target>


	<!-- compileClean -->
	<target name="compileClean" depends="clean,compile,zip" description="Clean then compile" />

	<target name="macRelease" depends="clean,compile,zip" description="create a mac os x end user application">

		<property name="dmg.file" value="release/triplea_${triplea.version}_mac.dmg"/>
		<property name="app.file" value="release/Triplea.app"/>


		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<mkdir dir="${app.file}" />
		<mkdir dir="${app.file}/Contents" />
		<mkdir dir="${app.file}/Contents/MacOS" />
		<mkdir dir="${app.file}/Contents/Resources/" />
		<mkdir dir="${app.file}/Contents/Resources/Java" />

		<copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" todir="${app.file}/Contents/MacOS/" />

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/MacOS/JavaApplicationStub" />
		</exec>

		<copy file="bin/triplea.jar" todir="${app.file}/Contents/Resources/Java/"/>

		<copy file="Info.plist" todir="${app.file}/Contents/" />

		<echo message="APPL????" file="${app.file}/Contents/PkgInfo" />



		<copy file="icons/icon.icns" todir="${app.file}/Contents/Resources/" />

		<exec executable="cp">
			<arg line="-r icons ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r images ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r sounds ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r license ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r dice_servers ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r maps ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="/Developer/Tools/SetFile">
			<arg line="-a B ${app.file}" />
		</exec>

		<unzip src="icons/Icon.zip" dest="${app.file}/" encoding="MacRoman" />

		<echo message="making dmg"/>
		<exec executable="hdiutil">
			<arg line="create -size 500m -fs HFS+ -volname TripleA ${dmg.file}" />
		</exec>


		<exec executable="hdiutil">
			<arg line="attach ${dmg.file}" />
		</exec>

		<exec executable="cp">
			<arg line="-r ${app.file} /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="-r doc /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="readme.html /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="TripleA_RuleBook.pdf /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="license/gpl.txt /Volumes/TripleA/COPYING" />
		</exec>

		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<!-- compress the dmg file -->
		<move file="${dmg.file}" tofile="temp.dmg"> </move>
		<exec executable="hdiutil">
			<arg line="convert temp.dmg -o ${dmg.file} -format UDBZ "/>
 		</exec>
		<delete file="temp.dmg"/>

	</target>

	<target name="macServerApp" depends="clean,compile,zip" description="create a mac os x server application">

		<property name="dmg.file" value="release/triplea_${triplea.version}_server.dmg"/>
		<property name="app.file" value="release/TripleaServer.app"/>


		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<mkdir dir="${app.file}" />
		<mkdir dir="${app.file}/Contents" />
		<mkdir dir="${app.file}/Contents/MacOS" />
		<mkdir dir="${app.file}/Contents/Resources/" />
		<mkdir dir="${app.file}/Contents/Resources/Java" />

		<copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" todir="${app.file}/Contents/MacOS/" />

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/MacOS/JavaApplicationStub" />
		</exec>

		<copy file="bin/triplea.jar" todir="${app.file}/Contents/Resources/Java/"/>
		<copy file="lib/derby_10_1_2.jar" todir="${app.file}/Contents/Resources/Java/"/>


		<copy file="ServerInfo.plist" tofile="${app.file}/Contents/Info.plist" />

		<echo message="APPL????" file="${app.file}/Contents/PkgInfo" />

		<copy file="icons/icon.icns" todir="${app.file}/Contents/Resources/" />


		<exec executable="cp">
			<arg line="-r icons ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="/Developer/Tools/SetFile">
			<arg line="-a B ${app.file}" />
		</exec>

		<unzip src="icons/Icon.zip" dest="${app.file}/" encoding="MacRoman" />

		<echo message="making dmg"/>
		<exec executable="hdiutil">
			<arg line="create -size 300m -fs HFS+ -volname TripleA ${dmg.file}" />
		</exec>


		<exec executable="hdiutil">
			<arg line="attach ${dmg.file}" />
		</exec>

		<exec executable="cp">
			<arg line="-r ${app.file} /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="-r doc /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="readme.html /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="license/gpl.txt /Volumes/TripleA/COPYING" />
		</exec>

		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<!-- compress the dmg file -->
		<move file="${dmg.file}" tofile="temp.dmg"> </move>
		<exec executable="hdiutil">
			<arg line="convert temp.dmg -o ${dmg.file} -format UDBZ "/>
 		</exec>
		<delete file="temp.dmg"/>

	</target>


	<!-- zip -->
	<target name="zip" depends="compile" description="create a zip file for all end users">
		<mkdir dir="release" />

		<mkdir dir="bin"/>
		<delete file="bin/triplea.jar" />

		<!-- we want to merge all the jar files we use
		     into the triplea.jar file, so unzip everything into
		     one directory -->
		<delete dir="deleteme"/>
		<mkdir dir="deleteme"/>
		<unjar dest="deleteme" overwrite="yes">
			<fileset dir="lib" includes="*.jar" excludes="junit.jar,derby*"> </fileset>
		</unjar>
		<delete dir="deleteme/META-INF"/>
		<copy todir="deleteme">
			<fileset dir="classes" includes="**"/>
		</copy>

		<jar destfile="bin/triplea.jar" basedir="deleteme">
			<manifest>
				<attribute name="Main-Class" value="games.strategy.engine.framework.GameRunner" />
			</manifest>
		</jar>
		<delete dir="deleteme"/>

		<zip zipfile="release/triplea_${triplea.version}_all_platforms.zip" compress="true">

			<!--zipfileset dir="lib/" prefix="triplea_${triplea.version}/lib/">
				<include name="**/*.jar" />
				<include name="**/*.zip" />

				<exclude name="**/junit.jar" />
			</zipfileset -->

			<zipfileset dir="doc/" prefix="triplea_${triplea.version}/doc/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="license/" prefix="triplea_${triplea.version}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="dice_servers/" prefix="triplea_${triplea.version}/dice_servers/">
				<include name="*.properties" />
			</zipfileset>

			<zipfileset dir="icons/" prefix="triplea_${triplea.version}/icons/">
				<include name="**/*.png" />
				<include name="**/*.bmp" />
				<include name="**/*.ico" />
			</zipfileset>

			<zipfileset dir="images/" prefix="triplea_${triplea.version}/images/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="sounds/" prefix="triplea_${triplea.version}/sounds/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="maps/" prefix="triplea_${triplea.version}/maps/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="." prefix="triplea_${triplea.version}/">
				<include name="readme.html" />
				<include name="*.bat" />
				<include name="triplea.exe" />
				<include name="changelog.txt" />
				<include name="TripleA_RuleBook.pdf" />
			</zipfileset>

			<zipfileset dir="." prefix="triplea_${triplea.version}/" filemode="755">
				<include name="*.sh"/>
				<exclude name="fix_mac_icon.sh"/>
				<exclude name="run-server.sh"/>
			</zipfileset>

			<zipfileset dir="bin/" prefix="triplea_${triplea.version}/bin/" filemode="755">
				<include name="**/triplea.jar" />
			</zipfileset>


		</zip>
	</target>

	<!-- zip -->
	<target name="zipServer" depends="zip" description="create zip for lobby server">
		<zip zipfile="release/triplea_${triplea.version}_server.zip" compress="true">

			<zipfileset dir="license/" prefix="triplea_${triplea.version}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="lib/" prefix="triplea_${triplea.version}/lib/">
				<include name="**/derby*.jar" />
			</zipfileset>

			<zipfileset dir="bin/" prefix="triplea_${triplea.version}/bin/">
				<include name="**/*.jar" />
			</zipfileset>

			<zipfileset dir="." prefix="triplea_${triplea.version}" filemode="755">
				<include name="run-server.sh"/>
			</zipfileset>
		</zip>

	</target>

	<!-- must be done after a ant zip has been executed (we dont depend since ant zip
         takes a while.  NSIS must be installed, and makensis must be on the path
	 -->
	<target name="zipInstallerWithJava" description="creates windows installer with java">
		<delete dir="release/installer" />
		<mkdir dir="release/installer" />

		<unzip src="release/triplea_${triplea.version}_all_platforms.zip" dest="release/installer" />
		<unzip src="installer/jre1.6.0_25.zip" dest="release/installer" />
		<move toDir="release/installer/triplea_${triplea.version}/jre">
			<fileset dir="release/installer/jre1.6.0_25" />
		</move>

		<copy file="installer/installer.nsi" toFile="release/installer/installer.nsi" />
		<copy file="triplea_embeded_jre.exe" toFile="release/installer/triplea_${triplea.version}/triplea.exe" overwrite="true" />
		<!-- the bat file doesnt work, since it does not point to the jre -->
		<delete file="release/installer/triplea_${triplea.version}/triplea_windows.bat" />


		<exec executable="makensis" dir="release/installer">
			<arg line="/Dversion=${triplea.version} installer.nsi " />
		</exec>

		<move file="release/installer/triplea_installer.exe" toFile="release/triplea_${triplea.version}_windows_installer_with_java.exe" />
	</target>


	<target name="release" depends="clean,compile,zip,zipInstaller,zipInstallerWithJava,zipSource" description="do a full windows/generic release, this must be done on a windows machine" />


	<!-- must be done after a ant zip has been executed (we dont depend since ant zip
         takes a while.  NSIS must be installed, and makensis must be on the path
	 -->
	<target name="zipInstaller" description="creates windows installer">
		<delete dir="release/installer" />
		<mkdir dir="release/installer" />

		<unzip src="release/triplea_${triplea.version}_all_platforms.zip" dest="release/installer" />

		<copy file="installer/installer.nsi" toFile="release/installer/installer.nsi" />

		<exec executable="makensis" dir="release/installer">
			<arg line="/Dversion=${triplea.version} installer.nsi " />
		</exec>

		<move file="release/installer/triplea_installer.exe" toFile="release/triplea_${triplea.version}_windows_installer.exe" />


	</target>

	<!-- zipSource -->
	<target name="zipSource" description="create a zip file for developers">
		<mkdir dir="release" />

		<zip zipfile="release/triplea_${triplea.version}_source_code_only.zip" compress="true">

			<zipfileset dir="src/" prefix="triplea_${triplea.version}/src/">
				<include name="**/*.java" />
			</zipfileset>

			<zipfileset dir="test/" prefix="triplea_${triplea.version}/test/">
				<include name="**/*.java" />
			</zipfileset>

			<zipfileset dir="junit/" prefix="triplea_${triplea.version}/junit/">
				<include name="excluded.properties" />
			</zipfileset>

			<zipfileset dir="lib/" prefix="triplea_${triplea.version}/lib/">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</zipfileset>

			<zipfileset dir="data/" prefix="triplea_${triplea.version}/data/">
				<include name="**/*.dtd" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.jpeg" />
				<include name="**/*.txt" />
				<include name="**/*.xml" />
				<include name="**/*.wav" />
				<include name="**/*.properties" />
				<include name="**/*.html" />
			</zipfileset>

			<zipfileset dir="bin/" prefix="triplea_${triplea.version}/bin/">
				<include name="**/*.bat" />
				<include name="**/*.sh" />
			</zipfileset>

			<zipfileset dir="." prefix="triplea_${triplea.version}/">
				<include name="build.xml" />
				<include name=".ant.properties" />
				<include name="readme.html" />
				<include name="TripleA_RuleBook.pdf" />
				<include name="TripleA_RuleBook.docx" />
				<include name="*.bat" />
				<include name="*.sh" />
				<include name="changelog.txt" />
				<include name="launch4j.config.xml" />
				<include name="launch4j_embedded_jre.config.xml" />
				<include name="Info.plist" />
				<include name="ServerInfo.plist" />
			</zipfileset>

			<zipfileset dir="icons/" prefix="triplea_${triplea.version}/icons/">
				<include name="**/*.png" />
				<include name="**/*.bmp" />
				<include name="**/*.ico" />
				<include name="**/*.icns" />
				<include name="**/*.zip" />
			</zipfileset>

			<zipfileset dir="doc/" prefix="triplea_${triplea.version}/doc/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="license/" prefix="triplea_${triplea.version}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="dice_servers/" prefix="triplea_${triplea.version}/dice_servers/">
				<include name="*.properties" />
			</zipfileset>

			<zipfileset dir="images/" prefix="triplea_${triplea.version}/images/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="sounds/" prefix="triplea_${triplea.version}/sounds/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="maps/" prefix="triplea_${triplea.version}/maps/">
				<include name="**/*.*" />
			</zipfileset>

		</zip>
	</target>


	<!-- javadoc -->
	<target name="javadoc" description="Generate JavaDoc documentation">
		<delete dir="apidoc" />

		<mkdir dir="apidoc" />

		<javadoc destdir="apidoc" Verbose="off">
			<package name="games.strategy.*" />
			<sourcepath>
				<pathelement location="src/" />
			</sourcepath>
		</javadoc>
	</target>

	<!-- test -->
	<target name="test" description="run junit tests">

        <delete dir="${junit-result-dir}" failonerror="false"/>
        <mkdir dir="${junit-result-dir}"/>

        <javac srcdir="${test-src}" destdir="${test-classes}/" debug="true" deprecation="true" target="1.5">
            <classpath refid="test.classpath"/>
        </javac>

        <!-- copy the game.xml file form the test into the test output directory -->
	    <copy todir="${test-classes}">
		<fileset dir="${test-src}" includes="**/*.xml"/>
	    </copy>

		<junit fork="yes" haltonerror="off">
			<classpath refid="test.classpath"/>
			<formatter type="plain" />
            <formatter type="xml" />
			 <batchtest todir="${junit-result-dir}">
             <fileset dir="${test-classes}">
                <filename name="**/*Test.class"/>
            </fileset>
            </batchtest>
		</junit>
	</target>

	<!-- analyze code for bugs. run compile first -->
    <target name="findbugs" description="run findbugs">

        <jar destfile="classes.jar" basedir="classes">
		</jar>

        <pathconvert refid="src.classpath" property="findbugs-path"/>
        <fb:findbugs home="ant/findbugs-1.3.9" excludeFilter="ant/FindbugsExcludeFilter.txt" output="xml" outputFile="fb.xml" timeout="3600000" jvmargs="-Xmx256m">
            <sourcePath path="src"/>
            <auxclasspath path="${findbugs-path}"/>
            <class location="classes.jar"/>
        </fb:findbugs>
    </target>


</project>
