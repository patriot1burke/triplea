<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE project [
	<!ENTITY digests SYSTEM "digests-include.xml">
]>

<!--
 * @FILE: build.xml
 * @AUTHOR David "Rain" Beverly <dnbeverly@gmail.com>
 (original authors: Sean Bridges, and many others)
-->

<project name="TripleA" basedir="." default="makejar"
	xmlns:fb="antlib:edu.umd.cs.findbugs">

	<taskdef uri="antlib:edu.umd.cs.findbugs" resource="edu/umd/cs/findbugs/anttask/tasks.properties"
		classpath="ant/findbugs-1.3.9/lib/findbugs-ant.jar" />

	<property file=".ant.properties" />
	<property name="bin" location="bin" />
	<property name="build" location="temp-build" />
	<property name="classes" location="classes" />
	<property name="junit-result-dir" location="test-results" />
	<property name="release" location="release" />
	<property name="src" location="src" />
	<property name="test-classes" location="testclasses" />
	<property name="test-src" location="test" />
	<property name="tests" value="**/*Test" />
	<property name="zip.prefix" value="triplea_${triplea.version}" />

	<path id="build.lib">
		<fileset dir="lib">
			<include name="*.jar" />
			<exclude name="junit*" />
			<exclude name="derby*" />
		</fileset>
	</path>

	<path id="src.classpath">
		<path refid="build.lib" />
		<pathelement location="${classes}" />
	</path>

	<path id="test.classpath">
		<path refid="src.classpath" />
		<fileset dir="lib" includes="junit*.jar,derby*.jar" />
	</path>

	<path id="build.data">
		<fileset dir="data">
			<include name="**/*.*" />
		</fileset>
	</path>

	<!-- conditional checking targets -->
	<target name="checkForMac">
		<!-- Mac OS X os family is BOTH 'mac' and 'unix' in the ant world -->
		<condition property="isMacOSX">
			<and>
				<os family="mac" />
				<os family="unix" />
			</and>
		</condition>
	</target>

	<target name="checkForWinNT">
		<!-- check for windows (XP or 7 hopefully) -->
		<condition property="isWindowsNT">
			<os family="winnt" />
		</condition>
	</target>

	<target name="checkForZip">
		<available file="${release}/${zip.prefix}_all_platforms.zip"
			property="zipFileAvailable" />
	</target>

	<target name="zipfileOnWindows" depends="checkForWinNT,checkForZip">
		<condition property="windowsZipAvailable">
			<and>
				<isset property="isWindowsNT" />
				<isset property="zipFileAvailable" />
			</and>
		</condition>
	</target>
	
	<target name="checkForJar">
		<available file="${bin}/triplea.jar" property="tripleaJarAvailable" />
	</target>
	<!-- end conditionals -->

	<!-- inspectManifest -->
	<target name="inspectManifest" description="pull META-INF/MANIFEST.MF for inspection"
		depends="checkForJar" if="tripleaJarAvailable">
		<exec executable="unzip">
			<arg line="-c ${bin}/triplea.jar META-INF/MANIFEST.MF" />
		</exec>
	</target>

	<!-- showpaths -->
	<target name="showpaths" description="show classpaths">
		<pathconvert pathsep="${line.separator}|   |-- " property="echo.path.src-classpath"
			refid="src.classpath" />
		<pathconvert pathsep="${line.separator}|   |-- " property="echo.path.test-classpath"
			refid="test.classpath" />
		<echo message="|-- src classpath" />
		<echo message="|   |" />
		<echo message="|   |-- ${echo.path.src-classpath}" />
		<echo message="|-- test classpath" />
		<echo message="|   |" />
		<echo message="|   |-- ${echo.path.test-classpath}" />
	</target>

	<!--checkBuildEnv -->
	<target name="checkBuildEnv">
		<!-- Check ant version first (pre-1.6.5 reports java version it was built 
			with, not what it's running under, so an ant built with 1.5 would report 
			that even if it's currently running under < 1.5). 1.6.5 was released in June 
			2005, so it's fairly unlikely that anyone would be using an older version, 
			but checking it is still a good idea, and it only takes a tiny fraction of 
			a second. -->
		<fail message="Ant version 1.6.5 or greater is required">
			<condition>
				<not>
					<or>
						<contains string="${ant.version}" substring="1.6.5" />
						<contains string="${ant.version}" substring="1.7" />
						<contains string="${ant.version}" substring="1.8" />
						<contains string="${ant.version}" substring="1.9" />
					</or>
				</not>
			</condition>
		</fail>
		<echo message="${ant.version}" />
		<!-- we require jdk 1.6 or greater -->
		<fail
			message="jdk 1.6 or greater required, you are currently using: ${ant.java.version}">
			<condition>
				<or>
					<equals arg1="1.1" arg2="${ant.java.version}" />
					<equals arg1="1.2" arg2="${ant.java.version}" />
					<equals arg1="1.3" arg2="${ant.java.version}" />
					<equals arg1="1.4" arg2="${ant.java.version}" />
					<equals arg1="1.5" arg2="${ant.java.version}" />
				</or>
			</condition>
		</fail>
		<echo message="JDK version: ${ant.java.version}" />
	</target>

	<!-- clean -->
	<target name="clean" description="clean up temp dirs and files">
		<!-- we don't want anything to depend on this but compileClean, macRelease, and release, 
			as it forces a complete rebuild every time, defeating the purpose of a 
			well-managed build process that only updates changed items -->
		<delete dir="${apidoc}" />
		<delete dir="${app.file}" />
		<delete dir="${bin}" />
		<delete dir="${build}" />
		<delete dir="${classes}" />
		<delete dir="${junit-result-dir}" />
		<delete dir="${release}" />
		<delete dir="${test-classes}" />
		<delete dir="access_logs" />
		<delete dir="derby_db" />
		<delete dir="logs" />
		<delete dir="savedGames" />
	</target>

	<!-- sweep -->
	<target name="sweep" description="clean up some artifacts">
		<delete dir="${bin}" excludes="triplea.jar" includes="**/**"
			includeemptydirs="true" />
		<delete dir="${build}" />
	</target>

	<!-- copyResources -->
	<target name="copyResources" description="copy resource files to build directory">
		<copy todir="${classes}">
			<path refid="build.data" />
		</copy>
	</target>

	<!-- compile -->
	<target name="compile" description="Compile the source files"
		depends="checkBuildEnv,copyResources">
		<javac srcdir="${src}" destdir="${classes}" debug="true"
			deprecation="true" classpathref="src.classpath" target="1.6" source="1.6"
			encoding="utf8" includeantruntime="false" />

		<!-- to check the correct java version, we need to compile the startup 
			class so that it will run on older vms -->
		<!-- delete the startup class, and recompile it -->
		<delete>
			<fileset dir="${classes}" includes="**/GameRunner.class" />
		</delete>
		<javac srcdir="${src}" destdir="${classes}" debug="true"
			deprecation="true" classpathref="src.classpath" target="1.3" source="1.3"
			includeantruntime="false" />
	</target>

	<!-- compileClean -->
	<target name="compileClean" depends="clean,compile" description="clean and then compile" />

	<!-- makejar -->
	<target name="makejar" depends="compile" description="create bin/triplea.jar">
		<unjar dest="${build}" overwrite="false">
			<path refid="build.lib" />
		</unjar>
		<copy todir="${build}">
			<fileset dir="${classes}" includes="**" />
		</copy>
		<mkdir dir="${bin}"/>
		<jar destfile="${bin}/triplea.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class"
					value="games.strategy.engine.framework.GameRunner" />
				<attribute name="TripleA-Version" value="${triplea.version}" />
				<!-- entity import -->
				&digests;
			</manifest>
		</jar>
	</target>

	<!-- run -->
	<target name="run" depends="compile" description="Run TripleA">
		<java classpathref="src.classpath" spawn="true" fork="true"
			classname="games.strategy.engine.framework.GameRunner" />
	</target>

	<target name="macRelease" depends="checkForMac,clean,makejar" description="create a mac os x end user application">

		<property name="dmg.file" value="release/triplea_${triplea.version}_mac.dmg"/>
		<property name="app.file" value="release/Triplea.app"/>


		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<mkdir dir="${app.file}" />
		<mkdir dir="${app.file}/Contents" />
		<mkdir dir="${app.file}/Contents/MacOS" />
		<mkdir dir="${app.file}/Contents/Resources/" />
		<mkdir dir="${app.file}/Contents/Resources/Java" />

		<copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" todir="${app.file}/Contents/MacOS/" />

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/MacOS/JavaApplicationStub" />
		</exec>

		<copy file="bin/triplea.jar" todir="${app.file}/Contents/Resources/Java/"/>

		<copy file="Info.plist" todir="${app.file}/Contents/" />

		<echo message="APPL????" file="${app.file}/Contents/PkgInfo" />



		<copy file="icons/icon.icns" todir="${app.file}/Contents/Resources/" />

		<exec executable="cp">
			<arg line="-r icons ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r doc ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="readme.html ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="run-headless-game-host-mac-os.sh ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/Resources/run-headless-game-host-mac-os.sh" />
		</exec>

		<exec executable="cp">
			<arg line="system.ini ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="MacOS_users_read_this_first.txt ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="TripleA_RuleBook.pdf ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="license/gpl.txt ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r assets ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r license ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r dice_servers ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r maps ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="-r old ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="/Developer/Tools/SetFile">
			<arg line="-a B ${app.file}" />
		</exec>

		<unzip src="icons/Icon.zip" dest="${app.file}/" encoding="MacRoman" />

		<echo message="making dmg"/>
		<exec executable="hdiutil">
			<arg line="create -size 500m -fs HFS+ -volname TripleA ${dmg.file}" />
		</exec>


		<exec executable="hdiutil">
			<arg line="attach ${dmg.file}" />
		</exec>

		<exec executable="cp">
			<arg line="-r ${app.file} /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="-r doc /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="readme.html /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="system.ini /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="MacOS_users_read_this_first.txt /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="TripleA_RuleBook.pdf /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="license/gpl.txt /Volumes/TripleA/COPYING" />
		</exec>

		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<!-- compress the dmg file -->
		<move file="${dmg.file}" tofile="temp.dmg"> </move>
		<exec executable="hdiutil">
			<arg line="convert temp.dmg -o ${dmg.file} -format UDBZ "/>
 		</exec>
		<delete file="temp.dmg"/>

	</target>

	<target name="macServerApp" depends="checkForMac,clean,makejar" description="create a mac os x server application">

		<property name="dmg.file" value="release/triplea_${triplea.version}_server.dmg"/>
		<property name="app.file" value="release/TripleaServer.app"/>


		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<mkdir dir="${app.file}" />
		<mkdir dir="${app.file}/Contents" />
		<mkdir dir="${app.file}/Contents/MacOS" />
		<mkdir dir="${app.file}/Contents/Resources/" />
		<mkdir dir="${app.file}/Contents/Resources/Java" />

		<copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" todir="${app.file}/Contents/MacOS/" />

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/MacOS/JavaApplicationStub" />
		</exec>

		<copy file="bin/triplea.jar" todir="${app.file}/Contents/Resources/Java/"/>
		<copy file="lib/derby-10.10.1.1.jar" todir="${app.file}/Contents/Resources/Java/"/>


		<copy file="ServerInfo.plist" tofile="${app.file}/Contents/Info.plist" />

		<echo message="APPL????" file="${app.file}/Contents/PkgInfo" />

		<copy file="icons/icon.icns" todir="${app.file}/Contents/Resources/" />


		<exec executable="cp">
			<arg line="-r icons ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="cp">
			<arg line="run-headless-game-host-mac-os.sh ${app.file}/Contents/Resources/" />
		</exec>

		<exec executable="chmod">
			<arg line="755 ${app.file}/Contents/Resources/run-headless-game-host-mac-os.sh" />
		</exec>

		<exec executable="/Developer/Tools/SetFile">
			<arg line="-a B ${app.file}" />
		</exec>

		<unzip src="icons/Icon.zip" dest="${app.file}/" encoding="MacRoman" />

		<echo message="making dmg"/>
		<exec executable="hdiutil">
			<arg line="create -size 300m -fs HFS+ -volname TripleA ${dmg.file}" />
		</exec>


		<exec executable="hdiutil">
			<arg line="attach ${dmg.file}" />
		</exec>

		<exec executable="cp">
			<arg line="-r ${app.file} /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="-r doc /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="readme.html /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="system.ini /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="MacOS_users_read_this_first.txt /Volumes/TripleA/" />
		</exec>

		<exec executable="cp">
			<arg line="license/gpl.txt /Volumes/TripleA/COPYING" />
		</exec>

		<exec executable="hdiutil">
			<arg line="detach /Volumes/TripleA" />
		</exec>

		<!-- compress the dmg file -->
		<move file="${dmg.file}" tofile="temp.dmg"> </move>
		<exec executable="hdiutil">
			<arg line="convert temp.dmg -o ${dmg.file} -format UDBZ "/>
 		</exec>
		<delete file="temp.dmg"/>

	</target>

	<!-- setupMac 
	<macrodef name="setupMac">
		<attribute name="volume.mac" default="/Volumes/TripleA/" />
		<attribute name="app.file" default="${release}/Triplea.app" />
		<attribute name="dmg.file" default="${release}/${zip.prefix}_mac.dmg" />
		<attribute name="dmg.size" default="500m" />
		<element name="derby-copy" optional="yes"
			description="this should be a copy task for macServerApp to include the derby jar" />
		<element name="resources-copy" optional="no"
			description="what resources should go in (release should be all, server just icons)" />
		<element name="info-plist-copy" optional="no"
			description="what Info.plist should we use" />
		<element name="basedir-copy" optional="no"
			description="what to include in the base directory" />
		<sequential>
			<exec executable="hdiutil">
				<arg line="detach @{volume.mac}" />
			</exec>
			<copy
				file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub"
				todir="@{app.file}/Contents/MacOS" />

			<chmod file="@{app.file}/Contents/MacOS/JavaApplicationStub"
				perm="755" />

			<copy file="bin/triplea.jar" todir="@{app.file}/Contents/Resources/Java" />

			<derby-copy />

			<info-plist-copy />
			
			<echo message="APPL????" file="@{app.file}/Contents/PkgInfo" />
			
			<copy file="icons/icon.icns" todir="@{app.file}/Contents/Resources" />

			<resources-copy />

			<exec executable="/Developer/Tools/SetFile">
				<arg line="-a B @{app.file}" />
			</exec>
			<unzip src="icons/Icon.zip" dest="@{app.file}" encoding="MacRoman" />

			<echo message="creating dmg" />
			<exec executable="hdiutil">
				<arg
					line="create -size @{dmg.size} -fs HFS+ -volname TripleA @{dmg.file}" />
			</exec>

			<exec executable="hdiutil">
				<arg line="attach @{dmg.file}" />
			</exec>

			<copy file="license/gpl.txt" todir="@{volume.mac}/COPYING" />
			
			<basedir-copy />
			
			<exec executable="hdiutil">
				<arg line="detach @{volume.mac}" />
			</exec>
			<move file="@{dmg.file}" tofile="temp.dmg" />
			<exec executable="hdiutil">
				<arg line="convert temp.dmg -o @{dmg.file} -format UDBZ " />
			</exec>
			<delete file="temp.dmg" />
		</sequential>
	</macrodef>-->

	<!-- macRelease 
	<target name="macRelease" depends="checkForMac,clean,makejar"
		description="create a mac os x end user application" if="isMacOSX">
		
		<setupMac>
			<info-plist-copy>
				<echo message="copying plist" />
				<copy file="Info.plist" todir="@{app.file}/Contents" />
			</info-plist-copy>
			<resources-copy>
				<echo message="copying resources" />
				<copy todir="@{app.file}/Contents/Resources">
					<fileset dir="${basedir}">
						<include name="dice_servers/**" />
						<include name="icons/**" />
						<include name="assets/**" />
						<include name="license/**" />
						<include name="maps/**" />
						<include name="old/**" />
					</fileset>
				</copy>
			</resources-copy>
			<basedir-copy>
				<echo message="copying base directory" />
				<copy todir="@{volume.mac}">
					<fileset dir="${basedir}">
						<include name="@{app.file}/**" />
						<include name="doc/**" />
						<include name="readme.html" />
						<include name="system.ini" />
						<include name="TripleA_RuleBook.pdf" />
					</fileset>
				</copy>
			</basedir-copy>
		</setupMac>
	</target>-->

	<!-- macServerApp 
	<target name="macServerApp" depends="checkForMac,clean,makejar"
		description="create a mac os x server application" if="isMacOSX">
		<property name="dmg.file" value="${release}/${zip.prefix}_server.dmg" />
		<property name="app.file" value="${release}/TripleaServer.app" />
		<property name="derby.jar" location="lib/derby-10.10.1.1.jar" />

		<setupMac app.file="${app.file}" dmg.file="${dmg.file}"
			dmg.size="500m">
			<derby-copy>
				<copy file="${derby.jar}" todir="@{app.file}/Contents/Resources/Java" />
			</derby-copy>
			<info-plist-copy>
				<copy file="ServerInfo.plist" tofile="${app.file}/Contents/Info.plist" />
			</info-plist-copy>
			<resources-copy>
				<copy todir="@{app.file}/Contents/Resources">
					<fileset dir="${basedir}">
						<include name="icons/**" />
						<include name="license/**" />
					</fileset>
				</copy>
			</resources-copy>
			<basedir-copy>
				<copy todir="@{volume.mac}">
					<fileset dir="${basedir}">
						<include name="@{app.file}/**" />
						<include name="doc/**" />
						<include name="readme.html" />
						<include name="system.ini" />
					</fileset>
				</copy>
			</basedir-copy>
		</setupMac>
	</target>-->

	<!-- zip -->
	<target name="zip" depends="makejar" description="create a zip file for all end users">
		<zip destfile="${release}/${zip.prefix}_all_platforms.zip" compress="true">
			<zipfileset dir="doc" prefix="${zip.prefix}/doc/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="license" prefix="${zip.prefix}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="dice_servers" prefix="${zip.prefix}/dice_servers/">
				<include name="*.properties" />
			</zipfileset>

			<zipfileset dir="icons" prefix="${zip.prefix}/icons/">
				<include name="**/*.png" />
				<include name="**/*.bmp" />
				<include name="**/*.ico" />
			</zipfileset>

			<zipfileset dir="assets" prefix="${zip.prefix}/assets/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="maps" prefix="${zip.prefix}/maps/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="old" prefix="${zip.prefix}/old/">
				<include name="**/*.jar" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/">
				<include name="readme.html" />
				<include name="system.ini" />
				<include name="*.bat" />
				<include name="triplea.exe" />
				<include name="changelog.txt" />
				<include name="TripleA_RuleBook.pdf" />
				<include name="MacOS_users_read_this_first.txt" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/"
				filemode="755">
				<include name="*.sh" />
				<exclude name="fix_mac_icon.sh" />
				<exclude name="run-server.sh" />
				<exclude name="run-headless-game-host-mac-os.sh" />
			</zipfileset>

			<zipfileset dir="bin" prefix="${zip.prefix}/bin/"
				filemode="755">
				<include name="triplea.jar" />
			</zipfileset>
		</zip>
	</target>

	<!-- zipBots -->
	<target name="zipBots" depends="zip" description="create a zip file for automated host servers (bots)">
		<zip destfile="${release}/${zip.prefix}_bots.zip" compress="true">
			<zipfileset dir="doc" prefix="${zip.prefix}/doc/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="license" prefix="${zip.prefix}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="dice_servers" prefix="${zip.prefix}/dice_servers/">
				<include name="*.properties" />
			</zipfileset>

			<zipfileset dir="icons" prefix="${zip.prefix}/icons/">
				<include name="**/*.png" />
				<include name="**/*.bmp" />
				<include name="**/*.ico" />
			</zipfileset>

			<zipfileset dir="assets" prefix="${zip.prefix}/assets/">
				<include name="**/*.*" />
				<exclude name="sounds/" />
				<exclude name="resources/" />
				<exclude name="territoryEffects/" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/">
				<include name="readme.html" />
				<include name="system.ini" />
				<include name="*.bat" />
				<include name="triplea.exe" />
				<include name="changelog.txt" />
				<include name="MacOS_users_read_this_first.txt" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/"
				filemode="755">
				<include name="*.sh" />
				<exclude name="run-server.sh" />
			</zipfileset>

			<zipfileset dir="bin" prefix="${zip.prefix}/bin/"
				filemode="755">
				<include name="triplea.jar" />
			</zipfileset>
		</zip>
	</target>

	<!-- zipServer -->
	<target name="zipServer" depends="zip" description="create zip for lobby server">
		<zip destfile="${release}/${zip.prefix}_server.zip" compress="true">

			<zipfileset dir="license" prefix="${zip.prefix}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="lib" prefix="${zip.prefix}/lib/">
				<include name="**/derby*.jar" />
			</zipfileset>

			<zipfileset dir="bin" prefix="${zip.prefix}/bin/">
				<include name="**/*.jar" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}"
				filemode="755">
				<include name="run-server.sh" />
				<include name="run-headless-game-host.sh" />
			</zipfileset>
		</zip>
	</target>

	<!-- zipSource -->
	<target name="zipSource" description="create a zip file for developers">
		<zip destfile="${release}/${zip.prefix}_source_code_only.zip"
			compress="true">

			<zipfileset dir="src" prefix="${zip.prefix}/src/">
				<include name="**/*.java" />
			</zipfileset>

			<zipfileset dir="test" prefix="${zip.prefix}/test/">
				<include name="**/*.java" />
			</zipfileset>

			<zipfileset dir="junit" prefix="${zip.prefix}/junit/">
				<include name="excluded.properties" />
			</zipfileset>

			<zipfileset dir="lib" prefix="${zip.prefix}/lib/">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</zipfileset>

			<zipfileset dir="data/" prefix="${zip.prefix}/data/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="bin" prefix="${zip.prefix}/bin/">
				<include name="**/*.bat" />
				<include name="**/*.sh" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/">
				<include name="*.bat" />
				<include name="*.sh" />
				<include name=".ant.properties" />
				<include name="build.xml" />
				<include name="digests-include.xml" />
				<include name="launch4j.config.xml" />
				<include name="launch4j_embedded_jre.config.xml" />
				<include name="Info.plist" />
				<include name="ServerInfo.plist" />
				<include name="changelog.txt" />
				<include name="readme.html" />
				<include name="system.ini" />
				<include name="MacOS_users_read_this_first.txt" />
				<include name="TripleA_RuleBook.pdf" />
				<include name="TripleA_RuleBook.docx" />
			</zipfileset>

			<zipfileset dir="icons" prefix="${zip.prefix}/icons/">
				<include name="**/*.png" />
				<include name="**/*.bmp" />
				<include name="**/*.ico" />
				<include name="**/*.icns" />
				<include name="**/*.zip" />
			</zipfileset>

			<zipfileset dir="doc" prefix="${zip.prefix}/doc/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="license" prefix="${zip.prefix}/license/">
				<include name="gpl.txt" />
			</zipfileset>

			<zipfileset dir="dice_servers" prefix="${zip.prefix}/dice_servers/">
				<include name="*.properties" />
			</zipfileset>

			<zipfileset dir="assets" prefix="${zip.prefix}/assets/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="maps" prefix="${zip.prefix}/maps/">
				<include name="**/*.*" />
			</zipfileset>

			<zipfileset dir="old" prefix="${zip.prefix}/old/">
				<include name="**/*.*" />
			</zipfileset>
		</zip>
	</target>
	
	<!--  description="create a zip file for developers including everything except for the .svn folders" -->
	<target name="zipSourceWithExtras">
		<zip destfile="${release}/${zip.prefix}_source.zip"
			compress="true">

			<zipfileset dir="${basedir}" prefix="${zip.prefix}/">
				<exclude name="**/*.svn" />
			</zipfileset>
		</zip>
	</target>
	
	<!--  description="create a zip file for developers including everything except for the .svn folders" -->
	<target name="zipSrcFolder">
		<zip destfile="${release}/${zip.prefix}_src.zip"
			compress="true">

			<zipfileset dir="src" prefix="${zip.prefix}/src/">
				<exclude name="**/*.svn" />
			</zipfileset>

			<zipfileset dir="data/" prefix="${zip.prefix}/data/">
				<exclude name="**/*.svn" />
			</zipfileset>

			<zipfileset dir="test" prefix="${zip.prefix}/test/">
				<exclude name="**/*.svn" />
			</zipfileset>
		</zip>
	</target>

	<!-- javadoc -->
	<target name="javadoc" description="Generate JavaDoc documentation">
		<delete dir="apidoc" />
		<!-- <mkdir dir="apidoc" /> -->

		<javadoc destdir="apidoc" Verbose="off">
			<package name="games.strategy.*" />
			<sourcepath>
				<pathelement path="${src}" />
			</sourcepath>
		</javadoc>
	</target>

	<!-- test -->
	<target name="test" depends="compile" description="run junit tests">

		<delete dir="${junit-result-dir}" failonerror="false"/>
		<mkdir dir="${junit-result-dir}" />
		<mkdir dir="${test-classes}" />

		<javac srcdir="${test-src}" destdir="${test-classes}" debug="true"
			deprecation="true" target="1.6" source="1.6" includeantruntime="false">
			<classpath refid="test.classpath" />
		</javac>

		<!-- copy the game.xml file from the test into the test output directory -->
		<copy todir="${test-classes}">
			<fileset dir="${test-src}" includes="**/*.xml" />
		</copy>

        <!-- Copy the data files to the test output directory -->
		<copy todir="${test-classes}">
			<path refid="build.data" />
		</copy>

		<junit fork="yes" haltonerror="off" printsummary="yes" failureproperty="junit.failed">
			<classpath>
				<pathelement location="${test-classes}" />
				<path refid="test.classpath" />
			</classpath>

			<formatter type="plain" />
			<formatter type="xml" />
			<batchtest todir="${junit-result-dir}">
				<fileset dir="${test-classes}">
					<filename name="${tests}.class" />
				</fileset>
			</batchtest>
		</junit>

		<fail if="junit.failed" message="Some tests failed, see above for details" />
	</target>

	<!-- analyze code for bugs. run compile first -->
	<target name="findbugs" description="run findbugs" depends="compile">

		<jar destfile="classes.jar" basedir="${classes}" />

		<pathconvert refid="src.classpath" property="findbugs-path" />
		<fb:findbugs home="ant/findbugs-1.3.9" excludeFilter="ant/FindbugsExcludeFilter.txt"
			output="xml" outputFile="fb.xml" timeout="3600000" jvmargs="-Xmx1000m">
			<sourcePath path="${src}" />
			<auxclasspath path="${findbugs-path}" />
			<class location="classes.jar" />
		</fb:findbugs>
	</target>

	<macrodef name="winInstaller">
		<attribute name="exe.file" />
		<attribute name="install.loc" default="${release}/installer" />
		<element name="add-java-elements" optional="yes" />
		<sequential>
			<unzip src="${release}/${zip.prefix}_all_platforms.zip" dest="@{install.loc}" />

			<!-- this is a noop for zipInstaller -->
			<add-java-elements />

			<copy file="installer/installer.nsi" tofile="@{install.loc}/installer.nsi" />

			<exec executable="makensis" dir="@{install.loc}">
				<arg line="/Dversion=${triplea.version} installer.nsi " />
			</exec>

			<move file="@{install.loc}/triplea_installer.exe" tofile="${release}/${zip.prefix}_@{exe.file}" />
		</sequential>
	</macrodef>

	<!-- zipInstallerWithJava -->
	<!-- must be done after a ant zip has been executed (we dont depend since 
		ant zip takes a while. NSIS must be installed, and makensis must be on the 
		path -->
	<target name="zipInstallerWithJava" description="creates windows installer with java"
		depends="zipfileOnWindows" if="windowsZipAvailable">

		<winInstaller exe.file="windows_installer_with_java.exe">
			<add-java-elements>
				<echo message="adding JRE" />
				<unzip src="installer/jre7_u72_x86.zip" dest="@{install.loc}" />
				<move todir="@{install.loc}/${zip.prefix}/jre">
					<fileset dir="@{install.loc}/jre7_u72_x86" />
				</move>
				<copy file="triplea_embeded_jre.exe" tofile="@{install.loc}/${zip.prefix}/triplea.exe" overwrite="true" />
				<!-- the bat file doesnt work, since it does not point to the jre -->
				<delete file="@{install.loc}/${zip.prefix}/triplea_windows.bat" />
			</add-java-elements>
		</winInstaller>

	</target>

	<!-- zipInstaller -->
	<!-- must be done after a ant zip has been executed (we dont depend since 
		ant zip takes a while. NSIS must be installed, and makensis must be on the 
		path -->
	<target name="zipInstaller" description="creates windows installer"
		depends="zipfileOnWindows" if="windowsZipAvailable">

		<winInstaller exe.file="windows_installer.exe" />

	</target>

	<target name="release" depends="checkForWinNT,clean,zipBots,zipServer,zipInstaller,zipInstallerWithJava,zipSource"
		description="do a full windows/generic release, this must be done on a windows machine"
		if="isWindowsNT" />
	
	<target name="all" depends="clean,compile,test,zip,zipSource" description="cleans, compiles, tests, zips, and zips source">
	</target>
</project>
